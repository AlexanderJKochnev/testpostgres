// init-replica.js
// init-replica.js
print("=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Replica Set rs0 ===");

sleep(20000); // –∂–¥—ë–º mongod

let result;
try {
  result = rs.initiate({
    _id: "rs0",
    members: [
      { _id: 0, host: "mongodb:27017" }
    ]
  });
  printjson(result); // ‚Üê –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
} catch (e) {
  print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Replica Set:");
  printjson(e);
  exit(1); // ‚Üê –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–ø–∞–¥—ë—Ç ‚Äî –≤–∏–¥–Ω–æ –≤ `docker-compose ps`
}

// –ñ–¥—ë–º, –ø–æ–∫–∞ —É–∑–µ–ª —Å—Ç–∞–Ω–µ—Ç PRIMARY
let status;
for (let i = 0; i < 30; i++) {
  sleep(2000);
  try {
    status = rs.status();
    if (status.myState === 1) {
      print("‚úÖ –£–∑–µ–ª —Å—Ç–∞–ª PRIMARY");
      exit(0);
    } else if (status.myState === 2) {
      print("üîß –£–∑–µ–ª —Å—Ç–∞–ª SECONDARY");
      exit(0);
    } else {
      print(`üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∑–ª–∞: ${status.myState}, –∂–¥—ë–º...`);
    }
  } catch (e) {
    print(`‚ö†Ô∏è rs.status() –æ—à–∏–±–∫–∞: ${e}`);
  }
}

print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏—è PRIMARY/SECONDARY");
printjson(status);
exit(1);